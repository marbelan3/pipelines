/* import shared library */
@Library('jenkins-shared-library') _
//def slackResponse = slackSend(channel: "tests-ui-tests-api", message: "Here is the primary message")

pipeline {
    agent any
//    tools { maven 'Maven' }
    environment {
        ALLURE = 'allure'
        VALUE_ONE = '1'
        VALUE_TWO = '2'
        VALUE_THREE = '3'
    }
    options {
        timeout(time: 2, unit: 'MINUTES')
        ansiColor('xterm')
        timestamps()
        buildDiscarder(
                logRotator(
                        numToKeepStr: '4',
                        artifactNumToKeepStr: '30',
                        daysToKeepStr: '2',
                        artifactDaysToKeepStr: '15'
                ))
    }
    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                            parameters([choice(choices: ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE'], name: 'CHOICE'),
                                        booleanParam(defaultValue: true, description: '', name: 'IS_ENABLED'),
                                        string(name: 'COUNT', defaultValue: '0', description: 'Please set seconds count'),
                                        string(name: 'BRANCH', defaultValue: 'master', description: 'Please chose the branch'),
                                        string(name: 'DATA_PROVIDER_STRING', defaultValue: '', description: 'Please set seconds count by comma')

                            ])
                    ])
                }
            }
        }
        stage('Checkout SCM') {
            steps {
                echo "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************"
                git branch: "${env.BRANCH}", credentialsId: 'marbelan3', url: 'https://github.com/marbelan3/pipelines.git'
                echo "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************"
            }
        }
        stage('list credentials ids') {
            steps {
                script {
                    sh 'cat $JENKINS_HOME/credentials.xml | grep "<id>"'
                }
            }
        }
        stage('Test') {
            steps {
//                slackSend(message: message, channel: '#ests-ui-tests-api', color: 'good', token: 'token')
                helloWorld("PETER")
                echo "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************"
                echo "env IS_ENABLED boolean param is : ${env.IS_ENABLED}"
                echo "env COUNTstring param is : ${env.COUNT}"
                echo "env CHOICE string param is : ${env.CHOICE}"
                echo "env CHOICE string param is : ${env.BRANCH}"
                echo "env DATA_PROVIDER_STRING string param is : ${env.DATA_PROVIDER_STRING}"
//                sh 'printenv'
                echo "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************\n" +
                        "*****************************"
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                sh """./mvnw clean test"""
                sleep(5)
            }
        }
        stage('Deploy') {
            steps {
                sh 'echo "This is my Deploy step"'
                sleep(5)
            }
        }
        stage('Parallel') {
            parallel {
                stage('Build') {
                    steps {
                        sh 'echo "Step 1"'
                        sh 'echo "Step 2"'
                        sh 'echo "Step 3"'
                        sleep(5)
                    }
                }
                stage('Test1') {
                    steps {
                        sh 'echo "This is my Test step"'
                        sleep(5)
                    }
                }
                stage('Deploy1') {
                    steps {
                        sh 'echo "This is my Deploy step"'
                        sleep(5)
                    }
                }
            }
        }

        stage('WHEN EXPRESSION with AND choice') {
            when {
                expression {
                    VALUE_ONE == '1' && VALUE_THREE == '3'

                }
            }
            steps {
                echo "env boolean param is : ${env.IS_ENABLED}"
                echo 'WHEN with AND expression works!'
            }
        }

// Expression based when example
        stage('WHEN EXPRESSION with OR') {
            when {
                expression {
                    VALUE_ONE == '1' || VALUE_THREE == '2'
                }
            }
            steps {
                echo 'WHEN with OR expression works!'
            }
        }

// When - AllOf Example
        stage("AllOf") {
            when {
                allOf {
                    environment name: 'VALUE_ONE', value: '1'
                    environment name: 'VALUE_TWO', value: '2'
                }
            }
            steps {
                echo "AllOf Works!!"
            }
        }

// When - Not AnyOf Example
        stage("Not AnyOf") {
            when {
                not {
                    anyOf {
                        branch "development"
                        environment name: 'VALUE_TWO', value: '4'
                    }
                }
            }
            steps {
                echo "Not AnyOf - Works!"
            }
        }

    }
    post {
        always {
            echo 'always runs regardless of the completion status of the Pipeline run'
            script {
                allure([
                        includeProperties: false,
                        jdk              : '',
                        properties       : [],
                        reportBuildPolicy: 'ALWAYS',
                        results          : [[path: 'target/allure-results']]
                ])
            }

        }

        success {
            echo 'step will run only if the build is successful'
            emailext(
                    subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    "J O B    S U C C E S S ! ! !"
                    "J O B    S U C C E S S ! ! !"
                    "J O B    S U C C E S S ! ! !"
            <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                    to: "marbelan3@gmail.com",
                    from: "marbelan3@gmail.com"
            )
            slackSuccessNotifier()
//            slackSend(channel: slackResponse.threadId, message: "Job ${env.BUILD_ID} on ${env.JENKINS_URL} success, '${env.BUILD_URL}allure'")
        }
        failure {
            echo 'only when the Pipeline is currently in a "failed" state run, usually expressed in the Web UI with the red indicator.'
            emailext(
                    subject: "UNSUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>UNSUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    "J O B    U N N N N N * * * * * * S U C C E S S ! ! !"
                    "J O B    U N N N N N * * * * * * S U C C E S S ! ! !"
                    "J O B    U N N N N N * * * * * * S U C C E S S ! ! !"
                    "J O B    U N N N N N * * * * * * S U C C E S S ! ! !"
            <h3>Check Allure Report at &QUOT;<a href='${env.BUILD_URL}${env.ALLURE}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT; </h3>
            <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                    to: "marbelan3@gmail.com",
                    from: "marbelan3@gmail.com"
            )
//            slackSend(channel: slackResponse.threadId, message: "Job ${env.BUILD_ID} on ${env.JENKINS_URL} failed, '${env.BUILD_URL}allure'")
        }
        unstable {
            echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
        }
        changed {
            echo 'can only be run if the current Pipeline is running at a different state than the previously completed Pipeline'
        }
    }
}